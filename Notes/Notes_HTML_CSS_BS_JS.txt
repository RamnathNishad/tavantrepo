Why HTML5?
-new form elements
-audio/video elements
-semantic tags 
-localStorage/sessionStorage objects
-Geolocation



=========================CSS===============
Cascading Style Sheet:-
-Html has limited attributes for styling and extensive styles and decorations if it is needed CSS can be used. It also separates the content from the styling which makes easier in maintaining the web pages in future.
More sharing and reusability of the styles are achived using CSS.
Three ways to use css in ur page:
1) inline CSS:- it is private to an html element by using an attribute "style"
e.g.
	<p style="color:red;background-color:yellow"> Para1</p>
	<p> Para2</style>

2) Embedded CSS:- it is defined in <style> tag under <head> element and it is meant for the whole page for that type of element.
syntax=>
	<head>
	<style>
	p{
		color:red;
	}
	</style>
	</head>

3) external CSS:- It is defined in a separate .css file and wherever it is needed, it is linked the
page using <link href="file.css" type="text/css" rel="stylesheet" />.  This link is to be defined
under the <head> tag
	file.css:-
		p{
			color:red;
		}

4) CSS class:- it  is defined using dot(.) with some name. It has got more sharing as it is independent of type element which can use it. i.e. it can be used by any elements.
syntax=>
	.c1{
		color:red;
	}
	.c2{
		background-color:red;
	}

use:
	<p class="c1 c2">Hello</p>
	<h1 class="c1">Welcome</h1>

----------------------CSS3---------------------------------
Border radius:-
text shadow 
box shadow

CSS Selectors:- to refer and select elements of the page to apply the styles.
a) element selector:-
		h1{color:red;}
b) attribute selector:-
		input['type']{
			color:red;
		}
c) class selector:-
		ul.x li {color:red;}
d) id selector:-
		ul#x li{color:red;}

e) immediate child selector:
		ul.x>li{color:red;}

====================CSS3 layouts==========================
Layouts:-
-Float
-Flex
-Columns
-Display block

---------CSS3 Media Queries-----------
For different screen size or viewports like desktop,laptop,tablets,mobiles we can use mdeia queries to make the design responsive according to the viewports.
We apply different styles for different view ports(scren sizes and resolutions)

Desktop : 1200px
Laptop: 1024px
Tablet: 768px
Phone: 480px


======================Bootstrap====================
It is  CSS library maintain by the community people for responsice design i.e. it is by default responsive. It contains bunch of css classes which can be used for various responsive designs.

Bootstrap uses grid system that constitute of 12 columns grid system and it is flexible.

Few commonly used Bootstrap components:-
1) Navigation menu creation
2) Creating different types of input forms
3) Table classes
4) Cards
5) Carousels
6) Accordian control
7) Dialog box
8) Different types of button classes

ways of using the bootstrap in a web page:
a) CDN url :- Content Delivery Network which is url on internet from various bootstrap providers like microsoft,google, twitter.

<link href="url" />

b) we can download the bootstrap files and use it locally in the page
<link href="path/bootstrap.css" />

two forms of bootstrap files are available:
a) production environment:- minified version in which all white spaces are removed. so size is smaller. bootstrap.min.css
b) development environment:- it is used for development env , bootstrap.css.













=========================JavaScript==========================
DOM:- Document Object Model is the tree representation of the page and it's elements 
through which we can interact with them in our scripts. It is loaded in the browser memory.

Each DOM object has properties, methods and events to work with them.

for e.g. "window" is a the DOM representation of the browser window and "document" is for the page currently loaded.
methods:
window.alert(msg)
window.confirm()
window.prompt()
 
properties:
window.location.href=url;
window.history

events:-
-load,unload,close,open


ways of using scripts:-
1) inline : within the element,used for small scripts
2) embedded :- within the page in <script> tag either inside <head> or <body> element.
3) external:- defined in a separate file with extension .js and link it in the page using 
	<script src="file.js"></script>

we can do following interactions with the elements:
-chaning their styles
-changing their content like image or text content
-changing their position

innerText vs innerHTML:- if a text has tags also to be interpreted, we should use innerHTML rather than innerText. for e.g.
	document.getElementById("x").innerHTML="<b>Welcome</b>";
	document.getElementsByTagName("p")[1]


programming constructs:
1) if-else
2) for loop
3) while
4) do-while
5) switch-case

we can also use arrays:-
javascript arrays:-

var names=["ram","raj","rahul"];
or
var names =new Array(3);   //0 to n-1

-array is not fixed size, it can grow/shrink at run time
names.push("vijay");

-to find the no of items in an array: names.length 
var data=new Array(3,5);
data[0][0]=100;

-to remove last item from the array:-
names.pop();

-to remove the specified index location value
names.splice(index,no of items to remove)
name.splice(2,3);


====string functions=========
-length:- no of characters in a string
-substring(startIndex,endIndex)
-concat(str2)


--Note:- we should always clear the setInterval timer.
	var timer = window.setInterval(fn,duration) ---repeates a function again and again after a interval.
	window.clearInterval(timer)

window.setTimeout(fn,duration)----this will call the function only once after the specified duration.
	window.clearTimeout(timer)

A) Browser objects:- already available inside browser irresepective of language. for e.g. window,document,location,history and so on.

-window.alert(msg)
-window.setInterval()
-window.url="www.google.com";
-window.close();
-var w=window.open("home.html")


B) Javascript objects:- only available in the javascript.
for e.g. string,number,date

1) string object:-
var s="Hello"
var s=new String("Hello");

-length------------> no of characters in a string
-toUpperCase()-----> s2.toUpperCase() 
-toLowerCase()-----> s2.toLowerCase()
-substring() or substr()----> extract specified num of chars 
				from a string
-charAt(i)-------> character at index i
-var words= 'welcome to india'.split('')----returns array of splitted words

-words.join("$")-----return all the array values joined with the $ char as a string
	'welcome$to$india'



2) Math Object:-
-Math.abs(n)
-Math.round(n)
-Math.min(2,3,4,5)------>2
-Math.max(2,3,4,5)------>5
-Math.floor(2.4)-------->2
-Math.ceil(2.4)--------->3
-Math.pow(2,3)----->8
-Math.sqrt(16)--------->4





3) Date functions:-

var dt=new Date();-----current date and time
var dt2= new Date(2014,0,10); ---Jan 10 2014

-dt.getMonth()---------> month of the date
-getYear()------> returns year of the date
-getDate()----
-getHours()
-getMinutes()
-getSeconds()

Q. display the watch in the page or status bar
10:01:25

===============JavaScript Validations======================
Basic validations functions:-
isNaN("abc")-----returns true if it is not a number
isNull()---if a value or object is null

Form validations using Regular expressions:-
Pattern validations:-
-------------Creating object using JSON-----------------
JavaScript Object Notation:-  it is a way of storing objects data using key/value pair, it is very light-weight and text format , hence easily readable data used now a days in many applications.

Syntax for defining single json object:-
{
	"ecode":101,
	"ename":"Ramnath",
	"salary":1111
}

Syntax for storing set of object records:
[
{
	"ecode":101,
	"ename":"Ramnath",
	"salary":1111
},
{
	"ecode":102,
	"ename":"Ravi",
	"salary":2222
}	
]

syntax for converting a json string into json object:-
var str="{'ecode':101,'ename':'ravi','salary':1111}";
	//str.ecode invalid


var empObj=JSON.parse(str);
	alert(empObj.ecode)

syntax for converting json object into json string:
	var str = JSON.stringify(empObj);

=================adding events to html elements=================
ways of binding events to elements:-
1) within the html element :-
	<input type="button" onclick="handler()" />
2) bind the events using javascript:-
	a) using element with event property 
		<input type="button" id="b1"  value="Display" />
		<script>
			document.getElementById("b1").onclick=function(){
				alert('button is clicked');	
			}
		</script>
	b) using addEventListener method of the element:
		<script>
		document.getElementById("b1").addEventListener("click",function(){
						alert('button is clicked');
		});
		</script>

HTML5 web storage:- used to store some user related data in browser.
Two objects are there:-
a) localStorage:- This is stored permanently till we don't clear it. Even if browser is closed and user comes back, it will be saved and can be accessed again. e.g. user profiles related data can be stored in this.

b) sessionStorage:- This is stored only till the browser session is there. once browser is closed it will remove the data from sesssion storage object. This can be used for carrying some info while navigating across pages. 

Methods to work with this:
-setItem("name","value") :- it is to store the data in the web storage
-getItem("name"):- returns the value stored for the item. always validate before  accessing it.
It gives "undefined" if item is not present.
-clearItem("name")

where it stores:- in developer (inspect option of the browser) window, under the "Application", both are stored separately.


Ques: Design a Home page using few menu options as below:
	Home 	About 	Settings

When user clicks "Settings" options it should go to next page which should have option to change the page settings like:
 =============================================== 
|		Page Settings		               |
 ============================================== |
|	-text color : use html5 color box	               |	
|	-page background color : use html5 color box    |
|	-font style (bold,italic): use checkboxes                |
|	-font size: use numeric spinner control	               |
 ===============================================
Provide one "Apply" button to save these settings changed by the user and a hyperlink to go back to home page. 
Pages should retain these settings if user comes back again after closing the browser.
==================ES6 Features====================
EcmaScript is the standard followed by the JavaScript for having compatibility across al browsers.

Scopes of variables in JavaScript:-
1) local scope:- variables defined inside the function or block means it is accessible only inside that function or block.
2) global scope:-  defined outside all the functions becomes global scope and can be referred anywhere inside the page.

using "var" keyword global variable is declared.
var x;
function show(){
	x=100;
}
function display(){
	alert(x);
}
display();

====================hoisting in javascript===============
-by default variables declared using "var" keyword will be hoisted(moved) at the top of the block hence scope of the variable will change to global to the block.
To have local scope, declare it will "let" keyword.
var x=0;
for(let x=1;x<=10;x++){
	console.log("x:", x);
}
console.log("x:",x);


-------------es6------------
//const and let both will have local scope; const cannot be modified throughout its life-time unlike let.
//var 
//let
//const
const x=100;
let y=200;





































 






















