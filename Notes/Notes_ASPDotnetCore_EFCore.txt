Software Architecures:-
1) Monolithic :- Every components such as UI,Logic,Database code will be in a single executable unit of code.
2) Layered based application(N-tier):- Presentation layer(UI), Business layer and Database layer all are separately coded and maintained. It may have tight coupling if not properly designed.
3) Microservice Architetures:-  look into the slides
4) Event-based architecture:- works on events where task is executed when some event happens like message queue e.g. buy/sell stock prices when it reaches a set point
5) Serverless architecture:- Azure function is such example where we can deploy a standalone function and call it using applications. Here we don't need any server for the function deployed.



==================Entity Framework Core===================
EF:- It is an ORM tools from Microsoft for mapping database objects into application entity models.
-It is an open-source
-Works for SQL databases like MS Sql Server,Oracle,MySql,PostGreSql etc

ORM(Object-Relational Mapping) tool


Steps for EF Core database first approach:
1) install the following packages 
-Microsoft.EntityFrameworkCore(common for all SQL Databases)
-Npgsql.EntityFrameworkCore.PostgreSQL  (specifically for PostGreSql) 

2) Create the model classes as per table in database and DbContext class for databsae interaction and link model class with DbContext using DbSet<Model_type>

public EmpDBContext(DbContextOptions<EmpDBContext> options)
    :base(options)
{
    
}
public DbSet<Employee> Employee { get; set; }

3) We need to install and configure dependency inject services in console app
Microsoft.Extensions.DependencyInjection

configure dependency injection for Dal and Context instances:


Steps for EF Core Code-first approach:
1) install the following packages 
-Microsoft.EntityFrameworkCore(common for all SQL Databases)
-Npgsql.EntityFrameworkCore.PostgreSQL  (specifically for PostGreSql) 

2) Create the model classes as per table in database and DbContext class for databsae interaction and link model class with DbContext using DbSet<Model_type>

public EmpDBContext(DbContextOptions<EmpDBContext> options)
    :base(options)
{
    
}
public DbSet<Employee> Employee { get; set; }

3) Install a package to get the Migration commands

4) Add-Migration and Update-Database



ASP.NET Core MVC:- It is applicatio design architecture which involves three components ie. 
Model:- It represents the entities data along with their business logic
View:- Input/Output 
Controller:- Listening the request from user and deciding what model to use and what view to return as an output

All these work together with their corresponding responisbilites....
advantage of using MVC in ASP.NET Core:-
-in-built dependency injection
-Routing or navigation across
-Middlewares of ASP.NET Core


Stages:-
-create builder
-configure middlewares
-build app using builder
-use middlewares
-run the app


Two types of views:
1) Weakly-typed views:- no model is binded
2) Strongly-typed views:- model is binded with the view and it is accessed inside the view using "Model". How binding is done with is using one statement at the top of the view cshtml file:
	@model HRMS.Employee


	<h1>@Model.Ecode




MVC----->DataAccessLayer------>Repository layer---->DbContext(EF Core)


=================Statemanagement In ASP.NET MVC Core======================
Two ways:-
Client-side:-
	-Cookies:- text files stored on client-pc, depends on browser settings
	-QueryString :- it is passed using name and value pair in the url itself
	 
Server-side:-
	-Session:-  specific to browser or user session using key/value, scope is anywhere in the application
	-ViewData:- dictionaly object with scope from action to view only, stores as an object, needs type-cast for use
	-ViewBag:- dictionary object with scope from action to view only but it is dynamic type, no type-casting but no intelligence in Visual Studio
	-TempData:- Dictionary key/value but scope is across controllers. It is removed from the memory as soon as we access it. It can be retain while accessing by calling "Keep()" method 


--To access Session object, we need to enable it in Program.cs file with middleware:
 	builder.Services.AddSession();
	app.UseSession()



-------------------------Model Validations------------------------------
Model validations is to be done:
1) client-side:- Javascript
	using Annotations
		-Required
		-String max/min length
		-Range 
		

2) server-side:- ModelState.IsValid boolean property gets set to false if there is any model error is there.
we can add model property error logically using:
	ModelState.AddModelError("property of model","error message"); this will set the IsValid property false.
We should always perform task if there is no model error i..e ModelStat.IsValid is true.






------------------------Html Helpers and Tag Helpers-----------------------

3 ways of desiging Views Html elements:-
1) Manuallly writing the raw html elements 

2) using HtmlHelper classes: These are classes to generate html elements after compilation at server.
based on whether view is weakly-typed or strong-typed, we have two syntaxes

		<input type="text" id="txtname" name="txtname" />
	WK:- @Html.TextBox("txtname")
	ST:- @Html.TextBoxFor(modelItem=>modelItem.Uname)

-Form:-
	@using(Html.BeginForm())
	{

	}
	<form>

	</form>
-Label
-Textbox
-Radio
-Checkbox
-Dropdown
-TextArea


3) Tag helpers:-





4)---------------------MVC

One-to-One, One-to-Many, and Many-to-Many Relationships
Navigation Properties
Cascade Delete Behavior
Lazy and eager loading
URL Routing (Attribute and Conventional Routing), Constraints in routing	
-Partial Views
-ViewModel and Data Transfer Objects (DTOs)  
-Authentication and Authorization
- Identity in ASP.NET Core MVC  
- Implementing User Registration and Login  
- Role-Based and Policy-Based Authorization  




Relationshi[p in EF Core models:-
1) one-to-one
2) one-to-many
3) many-to-many


3 ways we can create these relationship:-
a) using annotation:  [ForeignKey]

class Department
{
	public int Id{get;set;}
	public string Dname{get;set;}
}

class Employee
{
	[Key]
	public int Ecode{get;set;}
	public string Ename {get;set;}
	[ForeignKey]
	public int Deptid{get;set;}

	public Department Department{get;set;} //navigation
}


b) using navigation:- follows conventions

c) using Fluent API :- (more control and configurable for few features which are not possible using annotation like cascaade on delete features etc.





Category(CatId,Cname)
	SubCategory:(SubCatId,SubCatName,CatId(FK))
		Product:(Id,Price,Name,SubCatId(FK))

public class Category
{

	public int Id{get;set:}
	public string CategoryName{get;set;}

	public List<SubCategory> SubCategories{get;set;}
} 

public class SubCategory
{

	public int Id{get;set:}
	public string SubCategoryName{get;set;}

	[ForeignKey("CatId")
	public Category Category{get;set;}

	public List<Product>Products{get;set;}
} 

public class Product
{

	public int Id{get;set:}
	public string ProductName{get;set;}
	public int Price{get;set;}
	
	[ForeignKey("SubCategoryId")
	public SubCategory SubCategory{get;set;}
} 

------------------------------Routing in ASP.NET Core------------------------------
1) Conventional Routing which is configured in Program.cs file uisng MapControllerRoute().
2) Attribute based routing:- This can be done on controllers and action methods: must be enabled in Program.cs using 
	[RoutePrefix("Employee")] ---for controller
	[Route("Home")] ----for action methods
	[Route("Home/{id}/{name}")]
	public IActionResult DoTask(int id,int name)
	{

	}

3) Partial views:- It is not dierctly accessed, it is call and used by other views. A complex views can be breaked into multiple partial views. Also partial views are sharable into other views.

-create the view as a partial view
-render the view in the parent views
	Html.RenderPartial():- returns void
	Html.Partial():- returns Html of the partial view

Note:- when the model is not passed to a partial then by default it takes parent view model


==================ViewModel and DTOs======================

class Employee
{
	public int Ecode{get;set;}
	public string Ename{get;set;}
	public int Salary{get;set;}
	public int Deptid{get;set;}
}

class EmployeeVM
{
	public int Ecode{get;set;}
	public string Ename{get;set;}
	public int Salary{get;set;}
	public int Deptid{get;set;}
	public List<SelectListItem> DeptIds{ get; set; }
}



Takeway:-
1)Relationshi[p in EF Core models:-
	a) one-to-one
	b) one-to-many
	c) many-to-many
2)Routing in ASP.NET Core
3)ViewModel and DTOs
4) Partial views
5) Assignments using Partial Views,ViewModel

===================================
today's agenda:
-Layout
-@RenderBody() :- is the portion of view which is designed in the view without any section name. Only one RenDerBody() is allowed in Layout.
-@RenderSection("section_name",optional_boolean):- this section will be defined inside the views linked with the layout. We can have more than one sections can be defined.

 

_ViewStart.cshtml is a special view file which is executed before each view. We use this to link the layout.cshtml with all the views:
	@{
		Layout="_Layout"; //default locatiois just with the "Shared" folder
	}

-Exception handling in ASP.NET MVC

When there is an exception, ASP.NET gives the developer error page but in production we should have custom error page to display errors.
we configure this using Middleware conditionally.
	if environment is developer or Production we can accordingly choose the error page. In launchsettings.json environment can be defined.


Levels of exception handling:
1) try/catch :- used at all action method level
2) at global level:- it is handled in OnException method of custom exeption class.

 





a) try/catch/finally




-Authorization and Authentication in MVC
Authentication is validatin the user credentials and Authorization means what the authenticated user has permissions to do.

1) in Program.cs
we need to use middleware for authentication:
	builder.Service.AddAuthentication(options=>{
	//what kind of authentication like Cookie based or token based
});

	app.UseAuthentication(); //first this 
	app.UseAuthorization(); //then this sequence is mandatory

2) Controller Action method:-
	[Authorize]
	public IActionResult Add()
	{

	}





-Restful API (Web API)


http://localhost:5071/Account/Login?ReturnUrl=%2FEmployees%2FIndex
 







