using command line tool for .net core application development:-

basic types:- 
a) value-types:-
predefined:
int,char,double,float,decimal,datetime,long,byte,uint,short,boolean and so on
user-defined types:-
-enum
-struct


b) reference types:-
predefined:string
user-defined types:-
-arrays
-classes
-interfaces


Arrays:-
-single-dimension:-
-multi-dimension:-
	-i)Rectangular  array: a particular dimension will have same number of items
	ii)Jagged array:- a dimension may have different number of items

--Data-conversions:-
1) value-to-value :- lower to higher(implicit) but higher to lower precision (explicit) as data loss may happen
2) value-to-reference:- boxing
3) reference-to-value:- unboxing
4) reference-to-reference:- base to derived or vice-versa


==============Convert vs Parse vs TryParse========================
1) Convert :- will give error is string is invalid and gives default value 0 if string null else
success conevrsion
2) TryParse:- if string is invalid it gives default value and if null also gives default value else true if successfull converision
3) Parse:- if string valid then successfull conversion, if string is null or invalid,it gives exception ArgumentNullExcpetion and FormatException respectively

==================DateTime parsing=============================



===================static modifier======================
it is a modifier which indicates the member of a class is not meant for its instances.
it is allocated once per class not per instance.
so it is accessed also using class name.

static method can only access static member(methods n fields) but non-static methods can access
both static as well as non static members also.

static can be called class name only.



====================out vs ref=================
Normally value-type variables are passed to a method by-value and objects are passed by-reference by default.
If we want to pass value-type variables also by-reference to a method, we can use out or ref keyword.
out: we use when the modification of the parameter is mandatory before leaving the method
ref:- optional modification of the parameter inside the method passed.


====================const vs readonly=====================
const:- is declared and assigned at the same time and cannot be changed till its scope is there.
readonly:- can be assigned only through constructor method i.e. one time assignment. later cannot be modified.



Q. Create an array for the cinema hall tickets of 25 by 25 seats.
User enters the number of seats to be booked. Once booking is successfull, the seat should be marked as 1. For e.g. if the user enter 2 seats to be booked, then seat[0][0]=1 and seat[0][1]=1 should be assigned. If number of tickets is unavailable, it should display error.
After booking, all the seats should be displayed on screen which should show 0 in free seats and 1 in booked seats.








OOPs:-
1) Abstraction:-  
ecommerce----customer----->car,family, cid,cname,contactno,billing address, pincode
employee----> ecode,ename,salary,emailid 

2) Encapsulation:- putting all the related things together

relations:-
3.1) Inheritance:- 
	kind-of or is-a relations
3.2) Aggregation/Composition:- part-of or has-a relation
	Aggregation:- contained objects still exist even if their container is not there
	Composition:- if the container is not their, contained object also does not exists
			Policy---->Nominee

	cardinality ratio:
		1:1-----> COURSE------LECTURER
		1:m---->DEPARTMENT----->EMPLOYEE
		m:1---->
		m:n---->STUDENT------>COURSE
 


4) Polymorphism:- One object behaves differently in different situations
	servant----->cook,watchman,tutor
a) static polymorphism:- overloading of the method. binding of the object to a type is pre-decided during compilation and cannot be changed to other type at runtime.
	
b) dynamic polymorphism:-	overriding of the methods across inheritance. binding of the object is decided at runtime 




=================constructor and destructor==================
ctor:- 
-it is autimatically called when object is created
-it is used to perform initial tasks as soon as object comes into memory like data-initialization is one the task, connection creation , file opening before manupulating.

-syntax=>
*name must be same as classname
*no return type
class Employee
{
	public Employee(){}
}
*ctor can be overloaded multiple times
ctor can be :
-private :- if we dont' want user to create instance of the class, we shud use private ctor
	Employee obj=new Employee();// not allowed
	e.g. Singleton pattern does not allow object creation by the users rather instance is provided by the server for use.
-public :- object creation is allowed by the users
-static:- is used to access or initialized static fields of the class as it is called only once and not for each instance creation and before non-static ctor, static ctor is called.


===================constructor chaining=================
It is used in inheritance where base and derived classes both field initialization through ctors.
-derived class ctor needs to pass data to the base class ctor using base(p1,p2,...)
Note: derived class ctor automatically calls base class blank ctor but if the base class has parameterized ctor, we need to call it manually
	public Derived(int a,int b): base(a)
	{
		this.b=b;
	}



depicting cardinality ratios:

class Product
{
	int pid;
	int price;
}
class Order
{
	int oid;
	DateTime orderDate;
	Product[] items;
}

class Course
{
	int cid;
	string cname;
}
class Faculty
{
	int fid;
	string fname;
	Course course;
}

-----------Polymorphism----------------
1) static :- overloading :- no of parameters,data-types of parameters.
2) dynamic :- overriding: base to derived class 
		-virtual:- optional overridding at derived level
		-abstract:- mandatory overriding at derived level
		-interface
*abstract keyword:
-abstract method does not have definition
-abstract must be overridden at derived classes
-class also must be declared as an abstract if there are any abstract methods in it.
-an abstract class may have bothe non-abstract as well as abstract methods
-an abstract class instance is allowed using new keyword

interface:-
we use in place multiple inheritance, interfaces are used
class Demo : Parent,IinterfaceTypr
{

}

* by default interface methods are public and abstract

interface IEmployee
{
}
class Employee : Parent,IEmployee
{

}


*inteface instance is also not allowed same as abstract class
* we can implement multiple interfaces in a class
*interface inheritance also allowed
interface I1
{
}

interface I2 : I1
{
}

explicit implementation
interface I1
{
	void Display();
}
interface I2
{
	void Display();
}
class Demo : I1,I2
{
	public void I1.Display()
	{
	}
	public void I2.Display()
	{
	}
}

I1 obj=new Demo();
I1.Display();

I2 obj2=new Demo();
obj2.Display();







-------destructor---
-executed automatically when object is destroyed
-we use for some clearling tasks like resource releasing 
syntax=>

	~Employee()
	{
		//resource releasing statements
	}
-No access specifier
-No overloading of destructor
-non-parameterised
-no return type

========================Collections======================
unlike arrays, collections have variable size and can grow and shrink at runtime.
Two types of collections:-
1) Non-generics:-  It is not strongly-typed i.e. everything is stored as an object tyoe so while accessing we need check their type and accordingly type-cast before using it.
problem:
	-if typecasting is wrong, exception will be there
	-extra lines of code for checking the types

System.Collections  e.g. ArrayList,Hashtable,Stack,Queue


2) Generics:- System.Collections.Generic:- stronly-typed 
System.Collections.Generics
	List<>
	Dictionary<,>	
	Stack<>,Queue<>
	SortedDictionary<,>
	Hashset<>:- no duplicate values and supports set operations Union,Intersect,Minus


======================Sorting Collections=========================
It gives one Sort() which is default sorting.
It is already implemented for primitive value collection but for custom type collection we need implement it.
two ways to do it:
1) IComparable<> :- default Sort()
2) IComparer<>:- custom sort wherein we need to pass the comparer object

==========================Exception handling===============================
Errors:
1) Compilation error:- syntax mistakes and detected by compiler during compilation. Developers need to rectify.
2) Runtime errors: it is notified during execution
	a) logical errors:-  when desired expected output is not there, so we need to check the various outputs and execution paths. Testing is done here for getting these errors.
	In visual studio we do debugging to find logical errors:
	i)break points:- program pauses at these points so we can analyse the status of variables and output. program must be in debug mode not in without debug
		we can use debug windows:
		i)watch window:- tracing some variables , how their values are chaning
		ii)immediate window:- any expressions on the state of variables can be checked
		iii)Locals window:- for block level variable, we use 	
	
	Debugging steps:
		i)steo over --line by line----> F10
		ii) step into :- debugging continuos inside the sun-methods---F11
		iii) step-out:- continuing without debugging further

	b) Exceptions:- no syntax or logic mistakes but program behaves abnormal on some situations and terminates abruptly.
	i) Pre-defined exceptions:- already exception classes are defined in the compiler
	CLR collects all the exception details and wraps in an exception object and throws it. Application has to catch the exception and handle it else it will terminate the application.
		we handle exception using try/catch/finally
	
	ii) Custom exceptions:-
	a)define the exception class by inheriting with System.Exception
	b) throw the exception
	c) handle it 

System.Exception


Predefined :- SystemException----Exception

Custom:- ApplicationException---Exception



Inner exception:-

try
{
 //divide by zero
}
catch(DivideByZeroException ex)
{
	//logging in file
	throw FileNotFoundException 
	
}


=================Properties=====================
These are way to access the private fields of a class called get/set methods or properties.
	public int Ecode{get;set;}

property can be readoonly also by making set as private or do not define it at all.
It gives object initializer as well as collection initializer syntaxes.

==========================delegate================
-It is a data-type which can hold references of functions.
-It is like function pointer f C/C++ but it is more type-safe means it binds only a particular signature of methods specified during delegate declaration.
steps:
1) declare :- what kind of methods can be binded
2) initialize:- binding of the methods
3) call:- invoking the binded methods

Usage: it is used to peform dynamic invocation of methods at runtime without having any relations among the objects.

Delegates are of two categories:
1) Single-Cast delegate:- only one method is binded at a time
2) Multi-cast delegate:- more than one methods are binded and invoked together. it is recommended for methods with void return type as we get only result from the last method invoked.
d1=>m1,m2
d2=>m3,m4,m5
d3=d1+d2;
d3()
d3=d3-d1;
d3();

* with delegate we can also bind anonymous methods
* delegate also accepts lambda expression using =>
	(a,b)=>{return a+b;}

======predefined generic delegates========
Action<>:- used for void return type methods
Func<>:- used for methods with some return type




=====================LINQ=================================
Language Integrated Query:- It is a common programming model for querying heterogeneous data sources like SQL,XML,Collections(Objects) etc.

It was introduced from .NET 3.5.

Two syntaxes for Linq:-
a) using query operators:- select,from,where,orderby and so on.
b) using extension methods and lamda operator:-

Pre-requisites:-
-uses of "var" keyword:- type-inference, implicit-typing
	var x=100;
	x="hello";//invalid
rules:
	a) declaration and assignment must be in the same line
	b) u cannot "var" for method arguments
	c) c cannot use it as return type of a method
	d) it cannot be used for class fields


-extension methods:-  It is a way of extending methods in a type without modifying it.
-lambda expression

-SingleOrDefault():- convert into single element , throws exception sequence contains more than one elements
-FirstOrDefault():- gives only the first record, does not throw exception if multiple elemenst are present in the sequence.

-Single()
-First()
==========================File operations=========================
Two formats of data can be stored in files:-
1) Text format:- character data so size is more, easily readable
2) Binary format:- binary data so size is smaller,not readable directly

Text format:- StreamWriter and StreamReader found in System.IO
Binary format:- BinaryWriter and BinaryReader 
------------------------------------------------------------------------------
Serialization:- Process saving state of an object to a stream
Deserialization:- Reading the state of an object from a stream
Binary format:-  use MessagePack.MessagePackSerializer 
Xml format:-  System.Xml.Serializer.XmlSerializer
SoapFormat: SoapSerializer

========================Namespaces=================================
It is a logical grouping of data-types.
-To resolve name-conflicts if the name is already defined , we can enclosed it in a different namesapce.
-proper cataloging of the data-types.

namespace N1
{

	class Employee
	{

	}
	class Department
	{

	}
}
 to refer these classes n types:
	using N1;

-Nesting of namespace can be done.


namespace Tavant
{

	class Hr
	{

	}
	
	namespace Blr
	{

	internal class Employee
	{

	}
	}

	namespace Hyd
	{
	class Account
	{

	}
	}
}


using Tavant;
using Tavant.Hyd;
	
	Account ac=new Account();


project------->namespace











=================working with classlibrary projects====================
These are the assemblies to be shared across projects.
steps:
1) create the classlibrary project
2) define all the classes n types as public which u want to share in another project
3) build it with no compilation errors. it generates .dll file not meant for executing directly as it is only for sharing.
4) go to the consumer project(may be another library or standalone)  and add reference of the class library
5) import the namespace in which classes are define : "using namespace_name;"  statement
6) use the classes in the consumer application

=================Access specifiers================================
-private:- accessed within the class only
-public"- unlimited access , inside other also 
-protected:- only to derived classes
-internal:- it is public in its parent project but it is private and cannot accessed in other projects
-protected internal:- it is public in its parent project like internal but for external projects it is protected i.e can be accessed only inside derived classes in other project


==================ADO.NET=========================================
Two approaches in ADO.NET:-
a) Connected model:- connection has to be always active and open till u r working with the data

b) Disconnected model:- Data is retrieved inside memory collection and connection is closed.
perform all the manipulations in the memory only. we don't need connection here.
once done, reopen the connection and save the changes into database.


In connected model:
steps for working with PostGreSql:
1) first install the NpgSql package from Nuget repository
2) import the namespace to get following classes:
	a) connection:- to configure connection details like server,database,authentication like username and pwd
	b) command:- for sql statements like SELECT ,INSERT,DELETE,UPDATE and stored procedures
		-Parameter
	c) DataReader :-
	
using System.Data.NpgSql
	NpgConnection

Host=localhost;Database=empdb;Username=postgres;Password=sa;Persist Security Info=True



====================Storing and Reading ConnectionString from config file========== 
steps:
1) add App.Config file in the executing application and store the connection string in it:
<configuration>
	<connectionStrings>
		<add connectionString="Host=localhost;Database=empdb;Username=postgres;Password=sa;Persist Security Info=True" 
			 name="pgconstr"/>
	</connectionStrings>
</configuration>

2) install the System.Configuration.ConfigurationManage from Nuget in the project
3) import the namespace System.Configuration
4) read and use the connection string:
	ConfigurationManager.ConnectionStrings["constr"].ConnectionString

=====================retrieving identity column value in ADO.NET================
a) table column must be "serial" for making it auto-generated i.e. identity values
b) command text in ADO.NET shoud be:
	"insert into table_name(col1,col2,...) values(@v1,@v2,... ) returning id;"
c) int idValue= (int)cmd.ExecuteScalar();


============calling stored procedure=================
-make sure CommandType is specified as System.Data.CommandType.StoredProcedure


====================Design Patterns===============================
These are patterns used to have more maintainable codes 

SOLID principles:-
i)S:- Single-Responsibility Principle(SRP):- A method or class must perform only one task rather than mutiple tasks. If it is there refactor the code and make more methods as per their tasks.

ii)O:- Open/Closed Principle (OCP):- A class should be opened for extension but closed for modifications.

iii)L:- Liskov Substitution Principle(LSP):-  A derived class should replace base class without breaking the base class functionalities.
 
 class Hyundai
{
	public virtual void MannualGear(){};	
}


class HyundaiEra : Hyndai
{
	public  override void MannualGear()
	{
		Console.WriteLine("HyundaiEra: Manual Gear");
	}
}

class HyundaiEraPlus : Hyundai
{
	public void AutomaticGear()
	{
		Console.WriteLine("HyundaiEraPlus : Automatic Gear");
	}
}

Hyundai car=new HyundaiEra();
car.MannualGear();

car=new HyundaiEraPlus();
car.AutomaticGear();

iv) I:- Interface Seggregation Principle(ISP):- a class should implement interfaces if it is not meant for it.

interface IAdmin
{
	void AddUser();
	void DeletUser();	
}
interface IGuests
{	
	void UpdateUserDetails();
	List<User> GetUserDetails(int id);
}

class Admin : IAdmin,IGuests
{
	//all methods
}

class Guest : IGuests
{
	//void UpdateUserDetails();
	//List<User> GetUserDetails(int id);
}

v) D:- Dependency Principle:- The higher class or module should depends on the lower classes or module through abstraction instead of direct dependency(concrete class).

class UI
{
	IDal dal;
	public UI(IDal dal)
	{
		this.dal=dal;
	}
	public void Add(){dal.Add();}
	public void Delete(dal.Delete();){}
}

interface IDal
{
	void Add();
	void Delete();
}
class DAL : IDal
{
	void Add(){}
	void Delete(){}
}
class DALPostGre : IDal
{
	void Add(){}
	void Delete(){}
}

main()
{
	IDal dal=new Dal();
	UI ui=new UI(dal);
	
	dal=new DalPostGre()
	UI ui=new UI(dal);
}




===============Factory Pattern============================
It provides a way to instantiate the objects without specifying their exact class

interface IAccount
{
	void Deposit();
	void Withdraw();
}

class SavingsAccount : IAccount
{

}
class CurrentAccount : IAccount
{

}


class AccountFactory
{
	public static IAccount CreateAccount(int choice)
	{
		if(choice==1)
		{
			return new SavingsAccount();
		}
		if(choice==2)
		{
			return CurrentAccount();
		}
	}
}


main()
{
	int choice=1;
	IAccount account=	AccountFactory.CreateAccount(choice);
	account.Deposit();
	account.WithDraw();
}


==================SingleTon=================
Only one instance of a class is used throughout.

class Employee
{

}
class SingleTon
{
	Employee emp=null;
	public static Employee GetEmpInstance()
	{
		if(emp==null)
		{
			emp=new Employee();
		}
		return emp;
	}
	
} 

=====================Builder Pattern======================
It separates object creation from its representation.

interface IBuilder
{
	void BuildMouse();
	void BuildMonitor();
	void GetComputer();	
}

class ComputerBuilder : IBuilder
{
	private Computer computer;
	public ComputerBuilder()
	{
		computer=new Computer();
	}
	public void BuildMouse()
	{
		computer.Mouse="mouse";		
	}
	public void BuildMonitor()
	{
		computer.Monitor="monitor";
	}
	public Computer GetComputer()
	{
		return computer;
	}
}

class Computer
{
	public string Mouse{get;set;}
	public string Monitor{get;set;}

	
	public void Display()
	{
		Console.WriteLine("Mouse:"+ Mouse);
		Console.WriteLine("Monitor:" + monitor);
	}
}

main()
{
	ComputerBuilder builder=new ComputerBuilder();
	builder.BuildMouse();
	builder.BuildMonitor();
	Computer computer=builder.GetComputer();
}

========================Adapter Pattern===========================
It allows incompatible interfaces to work together

class Student
{
	public void SendRequestToPrinciple()
	{
		string msg="We want 5 days leave on final match day";	
		Teacher t=new Teacher();
		t.Request(msg);
	}
}

//Adapter 
Teacher-----can communicate to Principle
class Teacher
{
	Principle p;
	public void Request(string msg)
	{
		p=new Principle();
		p.SendMsg(msg);
	}
}


//Adaptee
class Principle
{
	public void SendMsg(string msg)
	{
		CW(msg);
	}
}

========================Iterator Pattern==========================
It provides a way to access elements of an aggregate object sequentially without exposing its underlying structure

class Iterator<T> : IEnumerable<T>
{
	private List<T> collection;
	int position=-1;	
	public bool MoveNext()
	{
		position+=1;
		if(position>=collection.Count)
		{
			return false;
		}
		else
		{
			return true;
		}
	}
	public T Current()
	{
		get
		{
			return collection[position];
		}
	}
	
}

}











 







































